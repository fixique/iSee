# Customise this file, documentation can be found here:
# https://docs.fastlane.tools/actions/
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

default_platform :ios

platform :ios do

  workspace_file = 'iSee.xcworkspace'
  project_file = 'iSee.xcodeproj'
  prod_scheme = 'iSee'
  bundle_name = "DataGym.iSee"
  derived_data_path = "./buildData"

  before_all do |lane, options|  
    # ensure_git_status_clean 
  end

  desc "Build Main scheme of Xcode target in Debug configuration"
  desc "Parameters:
  - clean: Pass **true** if you need to clean project before build
  "
  lane :build do |options|
    xcodebuild(
      workspace: workspace_file,
      scheme: prod_scheme,
      configuration: "Debug",
      clean: options[:clean],
      build: true,
      destination: "generic/platform=iOS\" CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY=\"",
      xcargs: "-sdk iphonesimulator ONLY_ACTIVE_ARCH=NO build-for-testing",
      derivedDataPath: derived_data_path
    )
  end

  desc "Run tests"
  lane :tests do
    run_tests(
      workspace: workspace_file,
      devices: ["iPhone SE"],
      scheme: prod_scheme,
      code_coverage: false,
      test_without_building: true,
      skip_build: true,
      derived_data_path: derived_data_path,
      output_types: "html,junit"
  )
  end

  desc "Update build number, set tag and push version bump commit to the develop branch if needed"
  desc "Parameters:
  - version_number: Number of version that will be set
  - type: Type of the build which will be set with the tag. For Example: for release candidate builds with tag `1.0.0-rc10` you need to pass `rc`.
  - type_v: Version of current build type (type parameter).
  - skip_push: Pass **true** if you need to skip push commits to the repository. The default is **false**
  "
  lane :prepare_for_integration do |options|
    version_number = options[:version_number]
    if version_number.nil?
      throw "Required version_number parameter"
    end

    build_number = options[:type_v]
    if not build_number.nil?
      increment_build_number_in_plist(build_number: build_number, target: prod_scheme)
    else
      increment_build_number_in_plist(target: prod_scheme)
    end

    increment_version_number_in_plist(version_number: options[:version_number], target: prod_scheme)
    
    commit_version_bump(
      xcodeproj: project_file,
      force: true
    )

    tag_label = get_version_number_from_plist(target: prod_scheme)

    type = options[:type]
    typeIndex = options[:type_v]
    if not type.nil?
      tag_label = "v" + tag_label + "-" + type + "" + typeIndex
    end

    add_git_tag(
      tag: tag_label
    )

    sh("git push && git push origin --tags")
  end

  desc "Update build number, set tag and push version bump commit to the develop branch if needed"
  desc "Parameters:
  - type: Type of the build which will be set with the tag. For Example: for release candidate builds with tag `1.0.0-rc10` you need to pass `rc`.
  - skip_push: Pass **true** if you need to skip push commits to the repository. The default is **false**
  "
  lane :prepare_for_beta do |options|
    current_version = get_version_number_from_plist(target: prod_scheme)
    type = options[:type]
    tag_prefix = "v" + current_version + "-" + type

    current_build_number = get_build_number_from_plist(target: prod_scheme)
    result_tag_index = current_build_number.to_i + 1
    build_number = tag_prefix + result_tag_index.to_s

    prepare_for_integration(
      version_number: current_version,
      type: options[:type],
      type_v: result_tag_index.to_s,
      build_number: build_number
    )
  end

  desc "Set `rc` tag and push to the current branch"
  desc "Parameters:
  - include_beta: Pass **true** to call `prepare_for_beta` lane for debug and prod types
  - skip_push: Pass **true** if you need to skip push commits to the repository. The default is **false**
  "
  lane :prepare_for_release do |options|
    include_beta = options[:include_beta]
    if include_beta.nil? || include_beta.to_s == ""
      throw "Required include_beta parameter"
    end

    if include_beta.to_s == "true"
      prepare_for_beta type:"debug"
    end

    tag_label = get_version_number_from_plist(target: prod_target)

    type = "rc"
    last_tag_index = get_build_number_from_plist(target: prod_target)

    if not type.nil?
      tag_label = tag_label + "-" + type + "" + last_tag_index
    end

    add_git_tag(
      tag: tag_label
    )

    skip_push_opt = options[:skip_push]
    needs_to_push = skip_push_opt.to_s.empty? || skip_push_opt.to_s == "false"

    if needs_to_push
      sh("git push", error_callback: ->(result) { 
        UI.error "git push failed with result: #{result}"
      })
      sh("git push origin --tags")
    end
  end

  desc "Upload a new Beta Build to Fabric"
  desc "Parameters:
  - destination: Type of the build which will be submitted
  "
  lane :beta do
    cocoapods(use_bundle_exec:true)
    gym(
      scheme: prod_scheme,
      configuration: "Debug",
      clean: true,
      include_bitcode: false,
      export_options: { 
        compileBitcode: false
      },
      export_method: "development",
      xcargs: "-allowProvisioningUpdates"
    )
    upload_to_fabric
    refresh_dsyms()
  end

  desc "Upload a new Release Build to iTunesConnect"
  lane :release do
    cocoapods(use_bundle_exec: true)

    cert(development: false)

    sigh(
      development: true,
      app_identifier: bundle_name
    )

    gym(
      scheme: prod_scheme,
      configuration: "Release",
      clean: true,
      include_bitcode: false,
      export_options: { 
        compileBitcode: false
      },
      export_method: "app-store"
    )

    upload_to_app_store(
      app_identifier: bundle_name
    )

    refresh_dsyms()
  end

  desc "Upload a new build to the Fabric"
  lane :upload_to_fabric do
    # Upload to Fabric
    crashlytics(
      api_token: "PUT TOKEN HERE",
      build_secret: "PUT BUILD SECRET HERE",
      emails: ["PUT_EMAILS_HERE"],
      notes: ENV[prod_scheme + "_iOS_Crashlytics_Changelog"]
    )
  end


  desc "Send dSYMS to Fabric"
  lane :refresh_dsyms do |options|
    download_dsyms(app_identifier: bundle_name, version: 'latest') # Download dSYM files from iTC
    upload_symbols_to_crashlytics # Upload them to Crashlytics
    clean_build_artifacts # Delete the local dSYM files
  end

end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded. 
# Learn more at https://github.com/fastlane/fastlane#metrics